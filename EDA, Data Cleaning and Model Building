{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5105</th>\n",
       "      <td>18234</td>\n",
       "      <td>Female</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>83.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5106</th>\n",
       "      <td>44873</td>\n",
       "      <td>Female</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>125.20</td>\n",
       "      <td>40.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5107</th>\n",
       "      <td>19723</td>\n",
       "      <td>Female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>82.99</td>\n",
       "      <td>30.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5108</th>\n",
       "      <td>37544</td>\n",
       "      <td>Male</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>166.29</td>\n",
       "      <td>25.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5109</th>\n",
       "      <td>44679</td>\n",
       "      <td>Female</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>85.28</td>\n",
       "      <td>26.2</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5110 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0      9046    Male  67.0             0              1          Yes   \n",
       "1     51676  Female  61.0             0              0          Yes   \n",
       "2     31112    Male  80.0             0              1          Yes   \n",
       "3     60182  Female  49.0             0              0          Yes   \n",
       "4      1665  Female  79.0             1              0          Yes   \n",
       "...     ...     ...   ...           ...            ...          ...   \n",
       "5105  18234  Female  80.0             1              0          Yes   \n",
       "5106  44873  Female  81.0             0              0          Yes   \n",
       "5107  19723  Female  35.0             0              0          Yes   \n",
       "5108  37544    Male  51.0             0              0          Yes   \n",
       "5109  44679  Female  44.0             0              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0           Private          Urban             228.69  36.6  formerly smoked   \n",
       "1     Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2           Private          Rural             105.92  32.5     never smoked   \n",
       "3           Private          Urban             171.23  34.4           smokes   \n",
       "4     Self-employed          Rural             174.12  24.0     never smoked   \n",
       "...             ...            ...                ...   ...              ...   \n",
       "5105        Private          Urban              83.75   NaN     never smoked   \n",
       "5106  Self-employed          Urban             125.20  40.0     never smoked   \n",
       "5107  Self-employed          Rural              82.99  30.6     never smoked   \n",
       "5108        Private          Rural             166.29  25.6  formerly smoked   \n",
       "5109       Govt_job          Urban              85.28  26.2          Unknown   \n",
       "\n",
       "      stroke  \n",
       "0          1  \n",
       "1          1  \n",
       "2          1  \n",
       "3          1  \n",
       "4          1  \n",
       "...      ...  \n",
       "5105       0  \n",
       "5106       0  \n",
       "5107       0  \n",
       "5108       0  \n",
       "5109       0  \n",
       "\n",
       "[5110 rows x 12 columns]"
      ]
     },
     "execution_count": 459,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data = pd.read_csv('C:\\\\Users\\\\yetne\\\\Desktop\\\\healthcare-dataset-stroke-data.csv')\n",
    "raw_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = raw_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>36517.829354</td>\n",
       "      <td>43.226614</td>\n",
       "      <td>0.097456</td>\n",
       "      <td>0.054012</td>\n",
       "      <td>106.147677</td>\n",
       "      <td>28.893237</td>\n",
       "      <td>0.048728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21161.721625</td>\n",
       "      <td>22.612647</td>\n",
       "      <td>0.296607</td>\n",
       "      <td>0.226063</td>\n",
       "      <td>45.283560</td>\n",
       "      <td>7.854067</td>\n",
       "      <td>0.215320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.120000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17741.250000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>77.245000</td>\n",
       "      <td>23.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>36932.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.885000</td>\n",
       "      <td>28.100000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54682.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>114.090000</td>\n",
       "      <td>33.100000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>72940.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>271.740000</td>\n",
       "      <td>97.600000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id          age  hypertension  heart_disease  \\\n",
       "count   5110.000000  5110.000000   5110.000000    5110.000000   \n",
       "mean   36517.829354    43.226614      0.097456       0.054012   \n",
       "std    21161.721625    22.612647      0.296607       0.226063   \n",
       "min       67.000000     0.080000      0.000000       0.000000   \n",
       "25%    17741.250000    25.000000      0.000000       0.000000   \n",
       "50%    36932.000000    45.000000      0.000000       0.000000   \n",
       "75%    54682.000000    61.000000      0.000000       0.000000   \n",
       "max    72940.000000    82.000000      1.000000       1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi       stroke  \n",
       "count        5110.000000  4909.000000  5110.000000  \n",
       "mean          106.147677    28.893237     0.048728  \n",
       "std            45.283560     7.854067     0.215320  \n",
       "min            55.120000    10.300000     0.000000  \n",
       "25%            77.245000    23.500000     0.000000  \n",
       "50%            91.885000    28.100000     0.000000  \n",
       "75%           114.090000    33.100000     0.000000  \n",
       "max           271.740000    97.600000     1.000000  "
      ]
     },
     "execution_count": 461,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4861\n",
       "1     249\n",
       "Name: stroke, dtype: int64"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['stroke'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can see that the data is highly imbalanced"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2994.000000</td>\n",
       "      <td>2994.000000</td>\n",
       "      <td>2994.000000</td>\n",
       "      <td>2994.000000</td>\n",
       "      <td>2994.000000</td>\n",
       "      <td>2897.000000</td>\n",
       "      <td>2994.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>36479.685037</td>\n",
       "      <td>43.757395</td>\n",
       "      <td>0.092184</td>\n",
       "      <td>0.037742</td>\n",
       "      <td>104.057809</td>\n",
       "      <td>29.065758</td>\n",
       "      <td>0.047094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21176.443056</td>\n",
       "      <td>21.966561</td>\n",
       "      <td>0.289334</td>\n",
       "      <td>0.190604</td>\n",
       "      <td>43.590651</td>\n",
       "      <td>8.110783</td>\n",
       "      <td>0.211876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.120000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17796.500000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>76.432500</td>\n",
       "      <td>23.400000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37093.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>90.755000</td>\n",
       "      <td>27.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54310.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>112.182500</td>\n",
       "      <td>33.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>72940.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>267.760000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id          age  hypertension  heart_disease  \\\n",
       "count   2994.000000  2994.000000   2994.000000    2994.000000   \n",
       "mean   36479.685037    43.757395      0.092184       0.037742   \n",
       "std    21176.443056    21.966561      0.289334       0.190604   \n",
       "min       67.000000     0.080000      0.000000       0.000000   \n",
       "25%    17796.500000    27.000000      0.000000       0.000000   \n",
       "50%    37093.000000    44.000000      0.000000       0.000000   \n",
       "75%    54310.000000    61.000000      0.000000       0.000000   \n",
       "max    72940.000000    82.000000      1.000000       1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi       stroke  \n",
       "count        2994.000000  2897.000000  2994.000000  \n",
       "mean          104.057809    29.065758     0.047094  \n",
       "std            43.590651     8.110783     0.211876  \n",
       "min            55.120000    10.300000     0.000000  \n",
       "25%            76.432500    23.400000     0.000000  \n",
       "50%            90.755000    27.800000     0.000000  \n",
       "75%           112.182500    33.500000     0.000000  \n",
       "max           267.760000    78.000000     1.000000  "
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['gender']=='Female'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking for missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "gender                 0\n",
       "age                    0\n",
       "hypertension           0\n",
       "heart_disease          0\n",
       "ever_married           0\n",
       "work_type              0\n",
       "Residence_type         0\n",
       "avg_glucose_level      0\n",
       "bmi                  201\n",
       "smoking_status         0\n",
       "stroke                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 464,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 465,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 465,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data.isnull(),cbar = False,yticklabels=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can see there are 201 missing values in age column. Before deciding what to do, we will first check its relationship and impact on target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deciding what to do about missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 466,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2a11acb3f40>"
      ]
     },
     "execution_count": 466,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data['bmi'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 467,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='gender', ylabel='bmi'>"
      ]
     },
     "execution_count": 467,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=data['gender'],y=data['bmi'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   141\n",
       "gender               141\n",
       "age                  141\n",
       "hypertension         141\n",
       "heart_disease        141\n",
       "ever_married         141\n",
       "work_type            141\n",
       "Residence_type       141\n",
       "avg_glucose_level    141\n",
       "bmi                  120\n",
       "smoking_status       141\n",
       "stroke               141\n",
       "dtype: int64"
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[(data['gender']=='Female') & (data['stroke']==1)].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We will fill the median bmi according to the gender of the person in the missing age coulumns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filling the missing values in bmi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fillbmi(cols):\n",
    "    bmi = cols[0]\n",
    "    sex = cols[1]\n",
    "    \n",
    "    if pd.isnull(bmi) == True:\n",
    "        if sex == 'Female':\n",
    "            return 27.8\n",
    "        else:\n",
    "            return 28.2\n",
    "        \n",
    "    else:\n",
    "        return bmi\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['bmi'] = data[['bmi','gender']].apply(fillbmi,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "      <td>5110.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>36517.829354</td>\n",
       "      <td>43.226614</td>\n",
       "      <td>0.097456</td>\n",
       "      <td>0.054012</td>\n",
       "      <td>106.147677</td>\n",
       "      <td>28.858376</td>\n",
       "      <td>0.048728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21161.721625</td>\n",
       "      <td>22.612647</td>\n",
       "      <td>0.296607</td>\n",
       "      <td>0.226063</td>\n",
       "      <td>45.283560</td>\n",
       "      <td>7.700048</td>\n",
       "      <td>0.215320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.120000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17741.250000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>77.245000</td>\n",
       "      <td>23.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>36932.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.885000</td>\n",
       "      <td>28.100000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54682.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>114.090000</td>\n",
       "      <td>32.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>72940.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>271.740000</td>\n",
       "      <td>97.600000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id          age  hypertension  heart_disease  \\\n",
       "count   5110.000000  5110.000000   5110.000000    5110.000000   \n",
       "mean   36517.829354    43.226614      0.097456       0.054012   \n",
       "std    21161.721625    22.612647      0.296607       0.226063   \n",
       "min       67.000000     0.080000      0.000000       0.000000   \n",
       "25%    17741.250000    25.000000      0.000000       0.000000   \n",
       "50%    36932.000000    45.000000      0.000000       0.000000   \n",
       "75%    54682.000000    61.000000      0.000000       0.000000   \n",
       "max    72940.000000    82.000000      1.000000       1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi       stroke  \n",
       "count        5110.000000  5110.000000  5110.000000  \n",
       "mean          106.147677    28.858376     0.048728  \n",
       "std            45.283560     7.700048     0.215320  \n",
       "min            55.120000    10.300000     0.000000  \n",
       "25%            77.245000    23.800000     0.000000  \n",
       "50%            91.885000    28.100000     0.000000  \n",
       "75%           114.090000    32.800000     0.000000  \n",
       "max           271.740000    97.600000     1.000000  "
      ]
     },
     "execution_count": 471,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_no_mv = data.copy()\n",
    "data_no_mv.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Continuing EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>41069</td>\n",
       "      <td>Female</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>224.10</td>\n",
       "      <td>56.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>72911</td>\n",
       "      <td>Female</td>\n",
       "      <td>57.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>129.54</td>\n",
       "      <td>60.9</td>\n",
       "      <td>smokes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>66333</td>\n",
       "      <td>Male</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>78.40</td>\n",
       "      <td>64.8</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>1307</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>170.05</td>\n",
       "      <td>60.2</td>\n",
       "      <td>smokes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>544</th>\n",
       "      <td>545</td>\n",
       "      <td>Male</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>210.48</td>\n",
       "      <td>71.9</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>23551</td>\n",
       "      <td>Male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>87.43</td>\n",
       "      <td>55.7</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>672</th>\n",
       "      <td>31145</td>\n",
       "      <td>Female</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>67.81</td>\n",
       "      <td>55.7</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>3590</td>\n",
       "      <td>Female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>80.40</td>\n",
       "      <td>57.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>928</th>\n",
       "      <td>41097</td>\n",
       "      <td>Female</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>70.03</td>\n",
       "      <td>78.0</td>\n",
       "      <td>smokes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1077</th>\n",
       "      <td>15220</td>\n",
       "      <td>Female</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>87.03</td>\n",
       "      <td>55.2</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1559</th>\n",
       "      <td>37759</td>\n",
       "      <td>Female</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>72.63</td>\n",
       "      <td>66.8</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1564</th>\n",
       "      <td>3178</td>\n",
       "      <td>Female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>68.78</td>\n",
       "      <td>55.1</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1584</th>\n",
       "      <td>6372</td>\n",
       "      <td>Female</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>97.14</td>\n",
       "      <td>55.9</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1595</th>\n",
       "      <td>2898</td>\n",
       "      <td>Male</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>87.66</td>\n",
       "      <td>57.3</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1660</th>\n",
       "      <td>8960</td>\n",
       "      <td>Female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>73.41</td>\n",
       "      <td>56.0</td>\n",
       "      <td>smokes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1898</th>\n",
       "      <td>25405</td>\n",
       "      <td>Male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>187.52</td>\n",
       "      <td>57.7</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2081</th>\n",
       "      <td>5355</td>\n",
       "      <td>Male</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Rural</td>\n",
       "      <td>231.69</td>\n",
       "      <td>56.1</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2128</th>\n",
       "      <td>56420</td>\n",
       "      <td>Male</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>61.67</td>\n",
       "      <td>97.6</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2555</th>\n",
       "      <td>7171</td>\n",
       "      <td>Female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>102.51</td>\n",
       "      <td>55.7</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2764</th>\n",
       "      <td>20292</td>\n",
       "      <td>Female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>85.55</td>\n",
       "      <td>63.3</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2840</th>\n",
       "      <td>65895</td>\n",
       "      <td>Female</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>98.27</td>\n",
       "      <td>61.2</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3060</th>\n",
       "      <td>32604</td>\n",
       "      <td>Male</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>215.81</td>\n",
       "      <td>58.1</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3588</th>\n",
       "      <td>23047</td>\n",
       "      <td>Male</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>100.16</td>\n",
       "      <td>59.7</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>72784</td>\n",
       "      <td>Female</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>118.46</td>\n",
       "      <td>61.6</td>\n",
       "      <td>smokes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4154</th>\n",
       "      <td>47668</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>125.63</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4188</th>\n",
       "      <td>70670</td>\n",
       "      <td>Female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>57.96</td>\n",
       "      <td>64.4</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4209</th>\n",
       "      <td>51856</td>\n",
       "      <td>Male</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>56.90</td>\n",
       "      <td>92.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4225</th>\n",
       "      <td>14658</td>\n",
       "      <td>Female</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>77.10</td>\n",
       "      <td>55.9</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4351</th>\n",
       "      <td>63915</td>\n",
       "      <td>Female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>87.39</td>\n",
       "      <td>57.9</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4407</th>\n",
       "      <td>49277</td>\n",
       "      <td>Female</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>70.87</td>\n",
       "      <td>55.7</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4475</th>\n",
       "      <td>60675</td>\n",
       "      <td>Female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Rural</td>\n",
       "      <td>221.08</td>\n",
       "      <td>57.2</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4838</th>\n",
       "      <td>5131</td>\n",
       "      <td>Female</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>107.72</td>\n",
       "      <td>60.9</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4952</th>\n",
       "      <td>16245</td>\n",
       "      <td>Male</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>211.83</td>\n",
       "      <td>56.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "113   41069  Female  45.0             0              0          Yes   \n",
       "270   72911  Female  57.0             1              0          Yes   \n",
       "358   66333    Male  52.0             0              0          Yes   \n",
       "466    1307  Female  61.0             1              0          Yes   \n",
       "544     545    Male  42.0             0              0          Yes   \n",
       "662   23551    Male  28.0             0              0          Yes   \n",
       "672   31145  Female  17.0             0              0           No   \n",
       "715    3590  Female  28.0             1              0           No   \n",
       "928   41097  Female  23.0             1              0           No   \n",
       "1077  15220  Female  53.0             1              0          Yes   \n",
       "1559  37759  Female  53.0             0              0          Yes   \n",
       "1564   3178  Female  25.0             0              0          Yes   \n",
       "1584   6372  Female  32.0             0              0          Yes   \n",
       "1595   2898    Male  46.0             0              0          Yes   \n",
       "1660   8960  Female  42.0             0              0           No   \n",
       "1898  25405    Male  62.0             0              0          Yes   \n",
       "2081   5355    Male  63.0             0              0          Yes   \n",
       "2128  56420    Male  17.0             1              0           No   \n",
       "2555   7171  Female  56.0             0              0          Yes   \n",
       "2764  20292  Female  24.0             0              0          Yes   \n",
       "2840  65895  Female  52.0             0              0          Yes   \n",
       "3060  32604    Male  49.0             0              0          Yes   \n",
       "3588  23047    Male  43.0             0              0          Yes   \n",
       "3825  72784  Female  52.0             0              0          Yes   \n",
       "4154  47668  Female  49.0             0              0          Yes   \n",
       "4188  70670  Female  27.0             0              0          Yes   \n",
       "4209  51856    Male  38.0             1              0          Yes   \n",
       "4225  14658  Female  37.0             0              0          Yes   \n",
       "4351  63915  Female  39.0             0              0          Yes   \n",
       "4407  49277  Female  34.0             0              0           No   \n",
       "4475  60675  Female  48.0             1              0          Yes   \n",
       "4838   5131  Female  51.0             0              0          Yes   \n",
       "4952  16245    Male  51.0             1              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "113         Private          Rural             224.10  56.6     never smoked   \n",
       "270         Private          Rural             129.54  60.9           smokes   \n",
       "358   Self-employed          Urban              78.40  64.8     never smoked   \n",
       "466         Private          Rural             170.05  60.2           smokes   \n",
       "544         Private          Rural             210.48  71.9     never smoked   \n",
       "662         Private          Urban              87.43  55.7          Unknown   \n",
       "672         Private          Urban              67.81  55.7     never smoked   \n",
       "715         Private          Rural              80.40  57.5     never smoked   \n",
       "928         Private          Urban              70.03  78.0           smokes   \n",
       "1077        Private          Urban              87.03  55.2  formerly smoked   \n",
       "1559        Private          Rural              72.63  66.8          Unknown   \n",
       "1564        Private          Rural              68.78  55.1  formerly smoked   \n",
       "1584        Private          Urban              97.14  55.9     never smoked   \n",
       "1595        Private          Urban              87.66  57.3     never smoked   \n",
       "1660  Self-employed          Rural              73.41  56.0           smokes   \n",
       "1898       Govt_job          Urban             187.52  57.7     never smoked   \n",
       "2081       Govt_job          Rural             231.69  56.1  formerly smoked   \n",
       "2128        Private          Rural              61.67  97.6          Unknown   \n",
       "2555       Govt_job          Urban             102.51  55.7          Unknown   \n",
       "2764        Private          Urban              85.55  63.3     never smoked   \n",
       "2840        Private          Urban              98.27  61.2          Unknown   \n",
       "3060  Self-employed          Rural             215.81  58.1     never smoked   \n",
       "3588        Private          Urban             100.16  59.7     never smoked   \n",
       "3825        Private          Rural             118.46  61.6           smokes   \n",
       "4154        Private          Rural             125.63  57.2          Unknown   \n",
       "4188        Private          Rural              57.96  64.4     never smoked   \n",
       "4209        Private          Rural              56.90  92.0     never smoked   \n",
       "4225        Private          Rural              77.10  55.9          Unknown   \n",
       "4351        Private          Urban              87.39  57.9     never smoked   \n",
       "4407        Private          Urban              70.87  55.7  formerly smoked   \n",
       "4475       Govt_job          Rural             221.08  57.2     never smoked   \n",
       "4838        Private          Urban             107.72  60.9          Unknown   \n",
       "4952  Self-employed          Rural             211.83  56.6     never smoked   \n",
       "\n",
       "      stroke  \n",
       "113        1  \n",
       "270        0  \n",
       "358        0  \n",
       "466        0  \n",
       "544        0  \n",
       "662        0  \n",
       "672        0  \n",
       "715        0  \n",
       "928        0  \n",
       "1077       0  \n",
       "1559       0  \n",
       "1564       0  \n",
       "1584       0  \n",
       "1595       0  \n",
       "1660       0  \n",
       "1898       0  \n",
       "2081       0  \n",
       "2128       0  \n",
       "2555       0  \n",
       "2764       0  \n",
       "2840       0  \n",
       "3060       0  \n",
       "3588       0  \n",
       "3825       0  \n",
       "4154       0  \n",
       "4188       0  \n",
       "4209       0  \n",
       "4225       0  \n",
       "4351       0  \n",
       "4407       0  \n",
       "4475       0  \n",
       "4838       0  \n",
       "4952       0  "
      ]
     },
     "execution_count": 472,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_no_mv[data_no_mv['bmi'] > 55]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40       2\n",
       "0.08       2\n",
       "0.16       3\n",
       "0.48       3\n",
       "1.40       3\n",
       "        ... \n",
       "51.00     86\n",
       "54.00     87\n",
       "52.00     90\n",
       "57.00     95\n",
       "78.00    102\n",
       "Name: age, Length: 104, dtype: int64"
      ]
     },
     "execution_count": 473,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_no_mv['age'].value_counts(ascending=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### As we can see there are values such as 1.8, 5, 2 in 'age' column which cannot be right. So, we are going to keep only the dataset having age > 16 years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2a11b32d040>"
      ]
     },
     "execution_count": 474,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data_no_mv['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_right_age_no_mv = data_no_mv[data_no_mv['age']>16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "      <td>4314.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>36599.408206</td>\n",
       "      <td>49.740380</td>\n",
       "      <td>0.115438</td>\n",
       "      <td>0.063746</td>\n",
       "      <td>108.234525</td>\n",
       "      <td>30.317269</td>\n",
       "      <td>0.057255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21179.069066</td>\n",
       "      <td>18.126633</td>\n",
       "      <td>0.319587</td>\n",
       "      <td>0.244328</td>\n",
       "      <td>47.565538</td>\n",
       "      <td>7.183035</td>\n",
       "      <td>0.232357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>67.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.120000</td>\n",
       "      <td>11.300000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17932.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>77.452500</td>\n",
       "      <td>25.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37087.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>92.295000</td>\n",
       "      <td>28.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54771.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>115.927500</td>\n",
       "      <td>33.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>72918.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>271.740000</td>\n",
       "      <td>97.600000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id          age  hypertension  heart_disease  \\\n",
       "count   4314.000000  4314.000000   4314.000000    4314.000000   \n",
       "mean   36599.408206    49.740380      0.115438       0.063746   \n",
       "std    21179.069066    18.126633      0.319587       0.244328   \n",
       "min       67.000000    17.000000      0.000000       0.000000   \n",
       "25%    17932.000000    35.000000      0.000000       0.000000   \n",
       "50%    37087.500000    50.000000      0.000000       0.000000   \n",
       "75%    54771.000000    64.000000      0.000000       0.000000   \n",
       "max    72918.000000    82.000000      1.000000       1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi       stroke  \n",
       "count        4314.000000  4314.000000  4314.000000  \n",
       "mean          108.234525    30.317269     0.057255  \n",
       "std            47.565538     7.183035     0.232357  \n",
       "min            55.120000    11.300000     0.000000  \n",
       "25%            77.452500    25.500000     0.000000  \n",
       "50%            92.295000    28.800000     0.000000  \n",
       "75%           115.927500    33.800000     0.000000  \n",
       "max           271.740000    97.600000     1.000000  "
      ]
     },
     "execution_count": 476,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_right_age_no_mv.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dropping id column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_right_age_no_mv = data_right_age_no_mv.drop('id',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "stroke\n",
       "0    4067\n",
       "1     247\n",
       "dtype: int64"
      ]
     },
     "execution_count": 478,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_right_age_no_mv.value_counts(data_right_age_no_mv['stroke'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing the outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2a11b305fd0>"
      ]
     },
     "execution_count": 479,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data_right_age_no_mv['avg_glucose_level'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2a11b0e7910>"
      ]
     },
     "execution_count": 480,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "q = data_right_age_no_mv['avg_glucose_level'].quantile(0.99)\n",
    "data_right_age_no_mv1 = data_right_age_no_mv[data_right_age_no_mv['avg_glucose_level']<q]\n",
    "sns.displot(data_right_age_no_mv1['avg_glucose_level'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-481-e31691c9c41e>:2: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  data_right_age_no_mv2 = data_right_age_no_mv1[data_right_age_no_mv['bmi']<q]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2a11b2fa3a0>"
      ]
     },
     "execution_count": 481,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "q = data_right_age_no_mv1['bmi'].quantile(0.99)\n",
    "data_right_age_no_mv2 = data_right_age_no_mv1[data_right_age_no_mv['bmi']<q]\n",
    "sns.displot(data_right_age_no_mv2['bmi'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4227.000000\n",
       "mean       30.004282\n",
       "std         6.508181\n",
       "min        11.300000\n",
       "25%        25.500000\n",
       "50%        28.700000\n",
       "75%        33.600000\n",
       "max        54.100000\n",
       "Name: bmi, dtype: float64"
      ]
     },
     "execution_count": 482,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_right_age_no_mv2['bmi'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a baseline model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating Dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_with_dummies = pd.get_dummies(data_right_age_no_mv2,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>stroke</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>gender_Other</th>\n",
       "      <th>ever_married_Yes</th>\n",
       "      <th>work_type_Never_worked</th>\n",
       "      <th>work_type_Private</th>\n",
       "      <th>work_type_Self-employed</th>\n",
       "      <th>Residence_type_Urban</th>\n",
       "      <th>smoking_status_formerly smoked</th>\n",
       "      <th>smoking_status_never smoked</th>\n",
       "      <th>smoking_status_smokes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>202.21</td>\n",
       "      <td>27.8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  hypertension  heart_disease  avg_glucose_level   bmi  stroke  \\\n",
       "0  67.0             0              1             228.69  36.6       1   \n",
       "1  61.0             0              0             202.21  27.8       1   \n",
       "2  80.0             0              1             105.92  32.5       1   \n",
       "3  49.0             0              0             171.23  34.4       1   \n",
       "4  79.0             1              0             174.12  24.0       1   \n",
       "\n",
       "   gender_Male  gender_Other  ever_married_Yes  work_type_Never_worked  \\\n",
       "0            1             0                 1                       0   \n",
       "1            0             0                 1                       0   \n",
       "2            1             0                 1                       0   \n",
       "3            0             0                 1                       0   \n",
       "4            0             0                 1                       0   \n",
       "\n",
       "   work_type_Private  work_type_Self-employed  Residence_type_Urban  \\\n",
       "0                  1                        0                     1   \n",
       "1                  0                        1                     0   \n",
       "2                  1                        0                     0   \n",
       "3                  1                        0                     1   \n",
       "4                  0                        1                     0   \n",
       "\n",
       "   smoking_status_formerly smoked  smoking_status_never smoked  \\\n",
       "0                               1                            0   \n",
       "1                               0                            1   \n",
       "2                               0                            1   \n",
       "3                               0                            0   \n",
       "4                               0                            1   \n",
       "\n",
       "   smoking_status_smokes  \n",
       "0                      0  \n",
       "1                      0  \n",
       "2                      0  \n",
       "3                      1  \n",
       "4                      0  "
      ]
     },
     "execution_count": 484,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi',\n",
       "       'stroke', 'gender_Male', 'gender_Other', 'ever_married_Yes',\n",
       "       'work_type_Never_worked', 'work_type_Private',\n",
       "       'work_type_Self-employed', 'Residence_type_Urban',\n",
       "       'smoking_status_formerly smoked', 'smoking_status_never smoked',\n",
       "       'smoking_status_smokes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 485,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_dummies.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = ['stroke','age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi', 'gender_Male', 'gender_Other', 'ever_married_Yes',\n",
    "       'work_type_Never_worked', 'work_type_Private',\n",
    "       'work_type_Self-employed', 'Residence_type_Urban',\n",
    "       'smoking_status_formerly smoked', 'smoking_status_never smoked',\n",
    "       'smoking_status_smokes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_with_dummies = data_with_dummies[cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stroke</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>gender_Other</th>\n",
       "      <th>ever_married_Yes</th>\n",
       "      <th>work_type_Never_worked</th>\n",
       "      <th>work_type_Private</th>\n",
       "      <th>work_type_Self-employed</th>\n",
       "      <th>Residence_type_Urban</th>\n",
       "      <th>smoking_status_formerly smoked</th>\n",
       "      <th>smoking_status_never smoked</th>\n",
       "      <th>smoking_status_smokes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>202.21</td>\n",
       "      <td>27.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stroke   age  hypertension  heart_disease  avg_glucose_level   bmi  \\\n",
       "0       1  67.0             0              1             228.69  36.6   \n",
       "1       1  61.0             0              0             202.21  27.8   \n",
       "2       1  80.0             0              1             105.92  32.5   \n",
       "3       1  49.0             0              0             171.23  34.4   \n",
       "4       1  79.0             1              0             174.12  24.0   \n",
       "\n",
       "   gender_Male  gender_Other  ever_married_Yes  work_type_Never_worked  \\\n",
       "0            1             0                 1                       0   \n",
       "1            0             0                 1                       0   \n",
       "2            1             0                 1                       0   \n",
       "3            0             0                 1                       0   \n",
       "4            0             0                 1                       0   \n",
       "\n",
       "   work_type_Private  work_type_Self-employed  Residence_type_Urban  \\\n",
       "0                  1                        0                     1   \n",
       "1                  0                        1                     0   \n",
       "2                  1                        0                     0   \n",
       "3                  1                        0                     1   \n",
       "4                  0                        1                     0   \n",
       "\n",
       "   smoking_status_formerly smoked  smoking_status_never smoked  \\\n",
       "0                               1                            0   \n",
       "1                               0                            1   \n",
       "2                               0                            1   \n",
       "3                               0                            0   \n",
       "4                               0                            1   \n",
       "\n",
       "   smoking_status_smokes  \n",
       "0                      0  \n",
       "1                      0  \n",
       "2                      0  \n",
       "3                      1  \n",
       "4                      0  "
      ]
     },
     "execution_count": 488,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_dummies.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining input and target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = data_with_dummies.iloc[:,2:]\n",
    "y = data_with_dummies['stroke']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scaling the input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.35538565,  3.86664498,  2.6948117 , ...,  1.99763733,\n",
       "        -0.83726103, -0.47007503],\n",
       "       [-0.35538565, -0.25862214,  2.11031875, ..., -0.50059137,\n",
       "         1.19437065, -0.47007503],\n",
       "       [-0.35538565,  3.86664498, -0.01509005, ..., -0.50059137,\n",
       "         1.19437065, -0.47007503],\n",
       "       ...,\n",
       "       [-0.35538565, -0.25862214, -0.52122386, ..., -0.50059137,\n",
       "         1.19437065, -0.47007503],\n",
       "       [-0.35538565, -0.25862214,  1.31745673, ...,  1.99763733,\n",
       "        -0.83726103, -0.47007503],\n",
       "       [-0.35538565, -0.25862214, -0.4706767 , ..., -0.50059137,\n",
       "        -0.83726103, -0.47007503]])"
      ]
     },
     "execution_count": 491,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaled_inputs = scaler.fit_transform(x)\n",
    "scaled_inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test = train_test_split(scaled_inputs,y,test_size = 0.2,random_state = 365)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating Logistic Regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 494,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = LogisticRegression()\n",
    "reg.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9438036083998816"
      ]
     },
     "execution_count": 495,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-3.06848977])"
      ]
     },
     "execution_count": 496,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.91797311e-01,  2.15254017e-01,  3.13182436e-01,\n",
       "        -1.31904366e-01,  2.32318682e-02,  9.76839869e-05,\n",
       "         2.26547194e-01, -1.56636363e-01,  3.29981041e-02,\n",
       "         1.61887492e-01,  8.54359393e-02,  9.01699327e-02,\n",
       "        -9.85666938e-02, -5.22360821e-02]])"
      ]
     },
     "execution_count": 497,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making an advance Logistic Regression Model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Doing Selective Scaling using ColumnTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_selective_scaling = data_right_age_no_mv2.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>27.8</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender   age  hypertension  heart_disease ever_married      work_type  \\\n",
       "0    Male  67.0             0              1          Yes        Private   \n",
       "1  Female  61.0             0              0          Yes  Self-employed   \n",
       "2    Male  80.0             0              1          Yes        Private   \n",
       "3  Female  49.0             0              0          Yes        Private   \n",
       "4  Female  79.0             1              0          Yes  Self-employed   \n",
       "\n",
       "  Residence_type  avg_glucose_level   bmi   smoking_status  stroke  \n",
       "0          Urban             228.69  36.6  formerly smoked       1  \n",
       "1          Rural             202.21  27.8     never smoked       1  \n",
       "2          Rural             105.92  32.5     never smoked       1  \n",
       "3          Urban             171.23  34.4           smokes       1  \n",
       "4          Rural             174.12  24.0     never smoked       1  "
      ]
     },
     "execution_count": 499,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_selective_scaling.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,Y_train,Y_test = train_test_split(data_selective_scaling.drop('stroke',axis=1),data_selective_scaling['stroke'],test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performing Selective Scaling Using ColumnTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "metadata": {},
   "outputs": [],
   "source": [
    "ohe = OneHotEncoder()\n",
    "minmax_scaler = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n",
       "       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n",
       "       'smoking_status', 'stroke'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_selective_scaling.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols = ['gender', 'hypertension', 'heart_disease', 'ever_married',\n",
    "       'work_type', 'Residence_type',\n",
    "       'smoking_status']\n",
    "num_cols = ['age','avg_glucose_level','bmi']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "metadata": {},
   "outputs": [],
   "source": [
    "ct = ColumnTransformer([('cat',ohe,cat_cols),('num',minmax_scaler,num_cols)],remainder='drop')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Test train split\n",
    "## fitting the scaling to train data\n",
    "## balancing the train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ColumnTransformer(transformers=[('cat', OneHotEncoder(),\n",
       "                                 ['gender', 'hypertension', 'heart_disease',\n",
       "                                  'ever_married', 'work_type', 'Residence_type',\n",
       "                                  'smoking_status']),\n",
       "                                ('num', MinMaxScaler(),\n",
       "                                 ['age', 'avg_glucose_level', 'bmi'])])"
      ]
     },
     "execution_count": 507,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaled_inputs_train = pd.DataFrame(ct.transform(X_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.017357</td>\n",
       "      <td>0.5475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.246154</td>\n",
       "      <td>0.227612</td>\n",
       "      <td>0.3425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.046154</td>\n",
       "      <td>0.132893</td>\n",
       "      <td>0.2750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.215385</td>\n",
       "      <td>0.284847</td>\n",
       "      <td>0.3525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.553846</td>\n",
       "      <td>0.098392</td>\n",
       "      <td>0.3225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    0    1    2    3    4    5    6    7    8    9   ...   12   13   14   15  \\\n",
       "0  0.0  1.0  0.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0  ...  0.0  1.0  0.0  0.0   \n",
       "1  1.0  0.0  0.0  0.0  1.0  1.0  0.0  1.0  0.0  0.0  ...  0.0  1.0  0.0  0.0   \n",
       "2  1.0  0.0  0.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0  ...  0.0  0.0  1.0  0.0   \n",
       "3  0.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  1.0  0.0   \n",
       "4  1.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  1.0  0.0   \n",
       "\n",
       "    16   17   18        19        20      21  \n",
       "0  0.0  1.0  0.0  0.076923  0.017357  0.5475  \n",
       "1  0.0  0.0  1.0  0.246154  0.227612  0.3425  \n",
       "2  0.0  1.0  0.0  0.046154  0.132893  0.2750  \n",
       "3  0.0  0.0  1.0  0.215385  0.284847  0.3525  \n",
       "4  0.0  1.0  0.0  0.553846  0.098392  0.3225  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_inputs_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaled_inputs_test = pd.DataFrame(ct.transform(X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Balancing the training input and training targets (Over Sampling using SMOTE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "metadata": {},
   "outputs": [],
   "source": [
    "smt = SMOTE(random_state = None,k_neighbors = 3)\n",
    "x_smote_train,y_smote_train = smt.fit_resample(scaled_inputs_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before SMOTE: \n",
      " training data size 3381\n",
      "After SMOTE: \n",
      " training data size 6386\n"
     ]
    }
   ],
   "source": [
    "x_smote_train.shape\n",
    "print('Before SMOTE: \\n training data size {}'.format(x_train.shape[0]))\n",
    "print('After SMOTE: \\n training data size {}'.format(x_smote_train.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 514,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg1 = LogisticRegression()\n",
    "reg1.fit(x_smote_train,y_smote_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7823363607892264"
      ]
     },
     "execution_count": 515,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg1.score(x_smote_train,y_smote_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {},
   "outputs": [],
   "source": [
    "yhat_test = reg1.predict(scaled_inputs_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[584, 212],\n",
       "       [ 17,  33]], dtype=int64)"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(Y_test,yhat_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see we have a large number of false positives and low number of false negatives. We can further"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.73      0.84       796\n",
      "           1       0.13      0.66      0.22        50\n",
      "\n",
      "    accuracy                           0.73       846\n",
      "   macro avg       0.55      0.70      0.53       846\n",
      "weighted avg       0.92      0.73      0.80       846\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(Y_test,yhat_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ROC AUC score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve, roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_roc = reg1.predict_proba(scaled_inputs_test)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7616582914572865"
      ]
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(Y_test,y_roc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ROC curve "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr,tpr,threshold = roc_curve(Y_test,y_roc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr,tpr,color='red',linewidth=3,label='logistic')\n",
    "plt.plot([0,1],[0,1],linestyle='--',label='no skill')\n",
    "plt.xlim(0,1)\n",
    "plt.ylim(0,1)\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.95067037, 0.95067037, 0.94410853, 0.93864992, 0.92696919,\n",
       "       0.92639281, 0.92066982, 0.92011646, 0.92003683, 0.9114013 ,\n",
       "       0.89655337, 0.89462126, 0.89461124, 0.89341545, 0.86509   ,\n",
       "       0.86487422, 0.85849674, 0.85807181, 0.85417021, 0.85094574,\n",
       "       0.84976195, 0.84893107, 0.82001053, 0.81885248, 0.81794633,\n",
       "       0.81763481, 0.81453669, 0.81408304, 0.811547  , 0.81061276,\n",
       "       0.77775129, 0.77044492, 0.76198418, 0.76025919, 0.75846593,\n",
       "       0.75697955, 0.7441253 , 0.74176564, 0.70341671, 0.70230439,\n",
       "       0.69787213, 0.68886359, 0.67814376, 0.67592122, 0.64054956,\n",
       "       0.63931259, 0.61782116, 0.61662411, 0.61489882, 0.61054564,\n",
       "       0.599559  , 0.59525003, 0.52751148, 0.51945214, 0.50933953,\n",
       "       0.50801048, 0.50582847, 0.50497063, 0.41224308, 0.40955609,\n",
       "       0.35643584, 0.35090836, 0.34333424, 0.34321866, 0.33614479,\n",
       "       0.3350575 , 0.31983891, 0.31803917, 0.28917961, 0.28841635,\n",
       "       0.27900545, 0.2778621 , 0.26051516, 0.25390583, 0.24154916,\n",
       "       0.24140082, 0.23736535, 0.23457639, 0.20444753, 0.20330811,\n",
       "       0.19492369, 0.19332163, 0.14326243, 0.14287691, 0.09625695,\n",
       "       0.0948052 , 0.09358014, 0.09345993, 0.08538977, 0.08535763,\n",
       "       0.00749231])"
      ]
     },
     "execution_count": 524,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "threshold"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TPR-FPR trade off"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "threshold:1.9506703683001678\n",
      "[[796   0]\n",
      " [ 50   0]] \n",
      "\n",
      "threshold:0.9506703683001678\n",
      "[[796   0]\n",
      " [ 50   0]] \n",
      "\n",
      "threshold:0.944108526220289\n",
      "[[795   1]\n",
      " [ 50   0]] \n",
      "\n",
      "threshold:0.9386499177518518\n",
      "[[794   2]\n",
      " [ 50   0]] \n",
      "\n",
      "threshold:0.9269691930797508\n",
      "[[792   4]\n",
      " [ 49   1]] \n",
      "\n",
      "threshold:0.9263928142826432\n",
      "[[791   5]\n",
      " [ 49   1]] \n",
      "\n",
      "threshold:0.9206698237781261\n",
      "[[789   7]\n",
      " [ 48   2]] \n",
      "\n",
      "threshold:0.9201164554978833\n",
      "[[788   8]\n",
      " [ 48   2]] \n",
      "\n",
      "threshold:0.9200368347145272\n",
      "[[788   8]\n",
      " [ 47   3]] \n",
      "\n",
      "threshold:0.9114012983512398\n",
      "[[787   9]\n",
      " [ 44   6]] \n",
      "\n",
      "threshold:0.8965533679573416\n",
      "[[784  12]\n",
      " [ 43   7]] \n",
      "\n",
      "threshold:0.8946212604683311\n",
      "[[783  13]\n",
      " [ 43   7]] \n",
      "\n",
      "threshold:0.894611238054201\n",
      "[[783  13]\n",
      " [ 42   8]] \n",
      "\n",
      "threshold:0.8934154527142883\n",
      "[[782  14]\n",
      " [ 42   8]] \n",
      "\n",
      "threshold:0.8650900022347233\n",
      "[[763  33]\n",
      " [ 41   9]] \n",
      "\n",
      "threshold:0.8648742184965118\n",
      "[[762  34]\n",
      " [ 41   9]] \n",
      "\n",
      "threshold:0.8584967419364268\n",
      "[[760  36]\n",
      " [ 40  10]] \n",
      "\n",
      "threshold:0.8580718084422887\n",
      "[[759  37]\n",
      " [ 40  10]] \n",
      "\n",
      "threshold:0.8541702065082806\n",
      "[[759  37]\n",
      " [ 39  11]] \n",
      "\n",
      "threshold:0.8509457383314322\n",
      "[[758  38]\n",
      " [ 39  11]] \n",
      "\n",
      "threshold:0.8497619530146134\n",
      "[[758  38]\n",
      " [ 38  12]] \n",
      "\n",
      "threshold:0.8489310714321568\n",
      "[[757  39]\n",
      " [ 38  12]] \n",
      "\n",
      "threshold:0.8200105326871453\n",
      "[[732  64]\n",
      " [ 37  13]] \n",
      "\n",
      "threshold:0.8188524819098799\n",
      "[[731  65]\n",
      " [ 37  13]] \n",
      "\n",
      "threshold:0.817946333309249\n",
      "[[731  65]\n",
      " [ 36  14]] \n",
      "\n",
      "threshold:0.8176348101245393\n",
      "[[730  66]\n",
      " [ 36  14]] \n",
      "\n",
      "threshold:0.8145366899343236\n",
      "[[729  67]\n",
      " [ 35  15]] \n",
      "\n",
      "threshold:0.8140830363227898\n",
      "[[728  68]\n",
      " [ 35  15]] \n",
      "\n",
      "threshold:0.8115469976398683\n",
      "[[726  70]\n",
      " [ 34  16]] \n",
      "\n",
      "threshold:0.8106127628643075\n",
      "[[725  71]\n",
      " [ 34  16]] \n",
      "\n",
      "threshold:0.7777512854915117\n",
      "[[705  91]\n",
      " [ 33  17]] \n",
      "\n",
      "threshold:0.7704449234439663\n",
      "[[704  92]\n",
      " [ 32  18]] \n",
      "\n",
      "threshold:0.7619841756671399\n",
      "[[696 100]\n",
      " [ 31  19]] \n",
      "\n",
      "threshold:0.7602591877584451\n",
      "[[695 101]\n",
      " [ 31  19]] \n",
      "\n",
      "threshold:0.7584659302927824\n",
      "[[693 103]\n",
      " [ 30  20]] \n",
      "\n",
      "threshold:0.7569795502489229\n",
      "[[692 104]\n",
      " [ 30  20]] \n",
      "\n",
      "threshold:0.7441253010886318\n",
      "[[688 108]\n",
      " [ 29  21]] \n",
      "\n",
      "threshold:0.7417656446285992\n",
      "[[687 109]\n",
      " [ 29  21]] \n",
      "\n",
      "threshold:0.7034167071873391\n",
      "[[676 120]\n",
      " [ 28  22]] \n",
      "\n",
      "threshold:0.7023043948390447\n",
      "[[675 121]\n",
      " [ 28  22]] \n",
      "\n",
      "threshold:0.697872131620405\n",
      "[[674 122]\n",
      " [ 27  23]] \n",
      "\n",
      "threshold:0.6888635852301784\n",
      "[[673 123]\n",
      " [ 27  23]] \n",
      "\n",
      "threshold:0.678143761047464\n",
      "[[666 130]\n",
      " [ 26  24]] \n",
      "\n",
      "threshold:0.6759212226427962\n",
      "[[665 131]\n",
      " [ 26  24]] \n",
      "\n",
      "threshold:0.6405495645389844\n",
      "[[650 146]\n",
      " [ 25  25]] \n",
      "\n",
      "threshold:0.6393125881511882\n",
      "[[649 147]\n",
      " [ 25  25]] \n",
      "\n",
      "threshold:0.6178211617304287\n",
      "[[638 158]\n",
      " [ 24  26]] \n",
      "\n",
      "threshold:0.616624107434408\n",
      "[[637 159]\n",
      " [ 24  26]] \n",
      "\n",
      "threshold:0.6148988247997499\n",
      "[[635 161]\n",
      " [ 23  27]] \n",
      "\n",
      "threshold:0.6105456398724214\n",
      "[[634 162]\n",
      " [ 22  28]] \n",
      "\n",
      "threshold:0.5995590042043378\n",
      "[[630 166]\n",
      " [ 21  29]] \n",
      "\n",
      "threshold:0.5952500269183254\n",
      "[[629 167]\n",
      " [ 21  29]] \n",
      "\n",
      "threshold:0.5275114776906469\n",
      "[[594 202]\n",
      " [ 20  30]] \n",
      "\n",
      "threshold:0.5194521449198818\n",
      "[[593 203]\n",
      " [ 20  30]] \n",
      "\n",
      "threshold:0.5093395259989529\n",
      "[[589 207]\n",
      " [ 19  31]] \n",
      "\n",
      "threshold:0.5080104805009374\n",
      "[[588 208]\n",
      " [ 19  31]] \n",
      "\n",
      "threshold:0.5058284706320384\n",
      "[[588 208]\n",
      " [ 18  32]] \n",
      "\n",
      "threshold:0.5049706254686174\n",
      "[[587 209]\n",
      " [ 18  32]] \n",
      "\n",
      "threshold:0.4122430795131825\n",
      "[[531 265]\n",
      " [ 17  33]] \n",
      "\n",
      "threshold:0.4095560891909777\n",
      "[[530 266]\n",
      " [ 17  33]] \n",
      "\n",
      "threshold:0.35643583583595445\n",
      "[[495 301]\n",
      " [ 16  34]] \n",
      "\n",
      "threshold:0.35090835750006627\n",
      "[[494 302]\n",
      " [ 16  34]] \n",
      "\n",
      "threshold:0.34333424467116436\n",
      "[[489 307]\n",
      " [ 15  35]] \n",
      "\n",
      "threshold:0.34321865530382756\n",
      "[[488 308]\n",
      " [ 15  35]] \n",
      "\n",
      "threshold:0.3361447903876499\n",
      "[[481 315]\n",
      " [ 14  36]] \n",
      "\n",
      "threshold:0.3350574969809671\n",
      "[[480 316]\n",
      " [ 14  36]] \n",
      "\n",
      "threshold:0.31983891417542887\n",
      "[[471 325]\n",
      " [ 13  37]] \n",
      "\n",
      "threshold:0.318039168891898\n",
      "[[470 326]\n",
      " [ 13  37]] \n",
      "\n",
      "threshold:0.2891796053922684\n",
      "[[455 341]\n",
      " [ 12  38]] \n",
      "\n",
      "threshold:0.28841635044957736\n",
      "[[454 342]\n",
      " [ 12  38]] \n",
      "\n",
      "threshold:0.2790054532245865\n",
      "[[441 355]\n",
      " [ 11  39]] \n",
      "\n",
      "threshold:0.2778621011946536\n",
      "[[440 356]\n",
      " [ 11  39]] \n",
      "\n",
      "threshold:0.26051515733524233\n",
      "[[423 373]\n",
      " [ 10  40]] \n",
      "\n",
      "threshold:0.2539058261130274\n",
      "[[422 374]\n",
      " [ 10  40]] \n",
      "\n",
      "threshold:0.24154915824072035\n",
      "[[413 383]\n",
      " [  9  41]] \n",
      "\n",
      "threshold:0.24140082241126484\n",
      "[[412 384]\n",
      " [  9  41]] \n",
      "\n",
      "threshold:0.23736535134847753\n",
      "[[410 386]\n",
      " [  8  42]] \n",
      "\n",
      "threshold:0.23457639443054878\n",
      "[[409 387]\n",
      " [  7  43]] \n",
      "\n",
      "threshold:0.20444753129277582\n",
      "[[382 414]\n",
      " [  6  44]] \n",
      "\n",
      "threshold:0.20330810640958114\n",
      "[[381 415]\n",
      " [  6  44]] \n",
      "\n",
      "threshold:0.19492368612281608\n",
      "[[373 423]\n",
      " [  5  45]] \n",
      "\n",
      "threshold:0.19332162643877\n",
      "[[372 424]\n",
      " [  5  45]] \n",
      "\n",
      "threshold:0.1432624345496503\n",
      "[[315 481]\n",
      " [  4  46]] \n",
      "\n",
      "threshold:0.14287690638861406\n",
      "[[314 482]\n",
      " [  4  46]] \n",
      "\n",
      "threshold:0.0962569541840311\n",
      "[[264 532]\n",
      " [  3  47]] \n",
      "\n",
      "threshold:0.09480520018560598\n",
      "[[263 533]\n",
      " [  3  47]] \n",
      "\n",
      "threshold:0.0935801380679321\n",
      "[[258 538]\n",
      " [  2  48]] \n",
      "\n",
      "threshold:0.09345993099599115\n",
      "[[257 539]\n",
      " [  2  48]] \n",
      "\n",
      "threshold:0.08538976870410016\n",
      "[[238 558]\n",
      " [  1  49]] \n",
      "\n",
      "threshold:0.0853576290031713\n",
      "[[237 559]\n",
      " [  1  49]] \n",
      "\n",
      "threshold:0.007492305305493163\n",
      "[[  1 795]\n",
      " [  0  50]] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in threshold:\n",
    "    j = np.where(y_roc > i,1,0)\n",
    "    print('threshold:{}'.format(i))\n",
    "    print(confusion_matrix(Y_test,j),'\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From the above given list of confusion matrix, we can select the threshold where there are less number of false negatives and more number of false positives as it suits our problem statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
